Papers:
When Saliency Meets Sentiment: Understanding How Image Content Invokes Emotion and Sentiment

1. Very very good result, code available on github
   Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields

2. Deep Feature Flow for Video Recognition
  code: https://github.com/msracver/Deep-Feature-Flow
  Fast object detection and segmentation in a video. 
  22.25fps reported on the Cityscapes andImageNet VID dataset with NVIDIA K40 GPU and Intel Core i7-4790 CPU.
  The naive per-frame method runs 4.05 fps.
  Comparsion between the naive method, which can be seen as any state of the art segmentation and detection algorithom perform on every frame,
  and the proposed method, is as follwing:
                per-frame    proposed    dataset
  detection       73.9        73.1       ImageNet VID
  segmetation     71.1        69.2       Cityscapes
  I think the small loss of accuracy can be ingored.

3. One-Shot Video Object Segmentation
   code: http://www.vision.ee.ethz.ch/~cvlsegmentation/osvos/

4. Zero-Shot Learning - The Good, the Bad and the Ugly
  Many zero-shot got very very bad result in the wild, only good at the dataset the authors used.
  The author tried almost all zero shot methods and released code at  https://www.mpi-inf.mpg.de/departments/computer-vision-and-multimodal-computing/research/zero-shot-learning/zero-shot-learning-the-good-the-bad-and-the-ugly/

5. Deep Image Matting
   Code(implenmented a baidu engineer): https://github.com/Joker316701882/Deep-Image-Matting
   His comment here: http://blog.leanote.com/post/calebge/Deep-Image-Matting%E5%A4%8D%E7%8E%B0%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93

Githubs:
Openai's platform that you can write your code to play game, then test with this platform. I think it can reduce a lot of your time.
https://github.com/openai/universe

Neural Complete
Use a network to generate another network, the generated network is in Python keras code.
https://github.com/kootenpv/neural_complete


Websites:
Changing gazes of people in photos
You can test it online. I tested with my own photo, amazing result
http://163.172.78.19/

deep-learning-most-amazing-applications
http://www.yaronhadad.com/deep-learning-most-amazing-applications/

Comments on many CVPR2017 papers
http://blog.csdn.net/zhangjunhit/article/category/6801399

a blog on MXNET: simple introduction
http://blog.csdn.net/u013713010/article/details/71635814http://blog.csdn.net/u013713010/article/details/71635814
